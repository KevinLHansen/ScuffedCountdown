@page "/countdown"

@using ScuffedCountdown.Data
@using ScuffedCountdown.Services
@using static ScuffedCountdown.Services.DrawValueService

<h1>Countdown</h1>

<div class="d-grid gap-2">
    <button class="btn btn-primary btn-lg" @onclick="NewWordRound">Word round</button>
    <button class="btn btn-primary btn-lg" @onclick="NewMathRound">Math round</button>
</div>

<br />
<br />

<div class="btn-group" hidden="@(!viewModel.MathRound)">
    <button class="btn btn-info btn-lg" @onclick="DrawLowNumber">Draw low number</button>
    <button class="btn btn-info btn-lg" @onclick="DrawHighNumber">Draw high number</button>
</div>

<div class="btn-group" hidden="@(!viewModel.WordRound)">
    <button class="btn btn-info btn-lg" @onclick="DrawVowel">Draw vowel</button>
    <button class="btn btn-info btn-lg" @onclick="DrawConsonant">Draw consonant</button>
</div>



<h3 style="margin: 25px 0px 0px 0px">@viewModel.Output</h3>

@code {
    CountdownViewModel viewModel = new CountdownViewModel();

    private void NewWordRound()
    {
        viewModel.LettersProvider.Reset();
        viewModel.Output = "";
        viewModel.WordRound = true;
        viewModel.MathRound = false;
    }

    private void NewMathRound()
    {
        viewModel.NumbersProvider.Reset();
        viewModel.Output = "";
        viewModel.WordRound = false;
        viewModel.MathRound = true;
    }

    private void DrawHighNumber()
    {
        viewModel.Output += " " + viewModel.NumbersProvider.DrawValue(Data.ValueType.HighNumber);
    }

    private void DrawLowNumber()
    {
        viewModel.Output += " " + viewModel.NumbersProvider.DrawValue(Data.ValueType.LowNumber);
    }

    private void DrawVowel()
    {
        viewModel.Output += " " + viewModel.LettersProvider.DrawValue(Data.ValueType.Vowel);
    }

    private void DrawConsonant()
    {
        viewModel.Output += " " + viewModel.LettersProvider.DrawValue(Data.ValueType.Consonant);
    }

    public class CountdownViewModel
    {
        public string Output = "";
        public bool WordRound = false;
        public bool MathRound = false;

        public List<char> LettersSequence;
        public List<int> NumberSequence;

        public DrawValueService LettersProvider;
        public DrawValueService NumbersProvider;

        public CountdownViewModel()
        {
            NumberSequence = new List<int>();
            LettersSequence = new List<char>();

            NumbersProvider = new DrawValueService(ServiceType.Numbers);
            LettersProvider = new DrawValueService(ServiceType.Letters);
        }
    }

}
